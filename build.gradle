plugins {
	id 'java-library'
	id 'org.ajoberstar.grgit' version '5.0.0'
	id 'org.gradlex.extra-java-module-info' version '1.0'
}

group = 'io.sf.carte'

description = 'css4j-dist'

version = '3.7.2'

dependencies {
	implementation 'io.sf.jclf:jclf-text:5.0.0'
	implementation 'io.sf.jclf:jclf-linear3:1.0.0'
	implementation 'org.dom4j:dom4j:2.1.1'
	implementation 'org.slf4j:slf4j-api:1.7.36'
	implementation 'nu.validator:htmlparser:1.4.16'
	implementation 'xmlpull:xmlpull:1.2.0'
	implementation 'xpp3:xpp3_min:1.2.0'
}

extraJavaModuleInfo {
	automaticModule('dom4j-2.1.1.jar', 'dom4j')
	automaticModule('htmlparser-1.4.16.jar', 'htmlparser')
}

repositories {
	maven {
		url = uri('https://repo.maven.apache.org/maven2/')
	}
	maven {
		url "https://css4j.github.io/maven/"
		mavenContent {
			releasesOnly()
		}
		content {
			includeGroup 'io.sf.carte'
			includeGroup 'io.sf.jclf'
			includeGroup 'xmlpull'
			includeGroup 'xpp3'
		}
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
}

// Clone all the repositories
tasks.register('cloneRepos') {
	dependsOn rmRepos

	doFirst {
		mkdir "$buildDir/repos"
		def gitTP = grgit.clone(dir: "$buildDir/repos/io.sf.carte.tokenproducer",
			uri: 'https://github.com/css4j/tokenproducer.git')
		def gitXmlDtd = grgit.clone(dir: "$buildDir/repos/io.sf.carte.xml.dtd",
			uri: 'https://github.com/css4j/xml-dtd.git')
		def gitCarteUtil = grgit.clone(dir: "$buildDir/repos/io.sf.carte.util",
			uri: 'https://github.com/css4j/carte-util.git')
		def gitCss4j = grgit.clone(dir: "$buildDir/repos/io.sf.carte.css4j",
			uri: 'https://github.com/css4j/css4j.git')
		def gitCss4jAgent = grgit.clone(dir: "$buildDir/repos/io.sf.carte.css4j.agent.net",
			uri: 'https://github.com/css4j/css4j-agent.git')
		def gitCss4jAwt = grgit.clone(dir: "$buildDir/repos/io.sf.carte.css4j.awt",
			uri: 'https://github.com/css4j/css4j-awt.git')
		def gitCss4jDom4j = grgit.clone(dir: "$buildDir/repos/io.sf.carte.css4j.dom4j",
			uri: 'https://github.com/css4j/css4j-dom4j.git')
		gitTP?.close()
		gitXmlDtd?.close()
		gitCarteUtil?.close()
		gitCss4j?.close()
		gitCss4jAgent?.close()
		gitCss4jAwt?.close()
		gitCss4jDom4j?.close()
	}

}

tasks.register('rmRepos', Delete) {
	doFirst {
		delete "$buildDir/repos"
	}
}

tasks.named('clean') {
	dependsOn rmRepos
}

// Produce a Javadoc of all modules
tasks.register('mergedJavadoc', Javadoc) {
	description 'Produces a merged Javadoc of all modules'
	destinationDir = file("$buildDir/docs/javadoc")
	title = "CSS4J ecosystem API"
	dependsOn cloneRepos
	dependsOn configurations.compileClasspath
	source = [ "$buildDir/repos/io.sf.carte.tokenproducer/src",
		"$buildDir/repos/io.sf.carte.xml.dtd/src",
		"$buildDir/repos/io.sf.carte.util/src",
		"$buildDir/repos/io.sf.carte.css4j/src",
		"$buildDir/repos/io.sf.carte.css4j.agent.net/src",
		"$buildDir/repos/io.sf.carte.css4j.awt/src",
		"$buildDir/repos/io.sf.carte.css4j.dom4j/src" ]
	includes += '**/*.java'
	classpath = configurations.compileClasspath
	options.addBooleanOption('html5', true)
	options.overview "$buildDir/repos/io.sf.carte.css4j/src/overview.html"
	options.addStringOption('-module-source-path', "$buildDir/repos/*/src")
}

tasks.withType(Javadoc) {
	options.addStringOption('Xdoclint:none', '-quiet')
	options.addStringOption('encoding', 'UTF-8')
	options.addStringOption('charset', 'UTF-8')
	options.links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
	options.links 'https://dom4j.github.io/javadoc/2.1.1/'
}
