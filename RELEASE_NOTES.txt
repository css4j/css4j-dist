
                            CSS4J RELEASE NOTES
                            ===================

Release 1.2.0 - December 20, 2020
---------------------------------

Release Highlights
------------------
 The 1-stable branch is supposed to be superseded, but there are people still
downloading 1.x artifacts so this release includes the 1-stable backports of
several 3.x improvements. However, users are encouraged to upgrade to 3.2 or
later as soon as possible. When upgrading, please keep in mind that 2 and 3.x
releases require Java 8 or higher.

 Notable changes:

- New 'geom' package.
- ":any-link" was overlooked but is now supported. ":link" and ":visited" now
  only apply to the link-related HTML elements and anything with a "xlink:href",
  while previously any element with an "href" attribute was matching.
- Loads of improvements and fixes to the native DOM implementation. The new
  element-name iterator is a time saver. If you use native DOM, you are invited
  to upgrade.
- In the native DOM and DOM4J, embedded style sheets are no longer used if they
  belong to a different namespace than the document element, preventing -for
  example- potential clashes with SVG styles and providing less overhead for the
  style computations when many SVG elements are present. Web browsers do not
  make this distinction about STYLE elements though, but IMHO is the right
  behaviour to have.
- A security loophole was fixed in the DOM wrapper, which could allow setting an
  unsafe base href.
- DOM4J module now depends on xmlpull-xpp3 1.2 artifact from
  https://github.com/xmlpull-xpp3/xmlpull-xpp3 instead of the old xpp3. The new
  artifact is not available from Maven Central -which is unlikely to make
  downstream users happy- but it is an optional dependency after all.
- In the DOM4J module, Element.setAttributeNode() and setAttributeNodeNS() were
  not working correctly due to an upstream bug. Now css4j overrides the relevant
  methods.

 These changes mean that this release is not a drop-in replacement for 1.1, so
the minor version was bumped to 1.2.


BUGS
----
 The 1.x branch has known bugs, and most of them are considered as too difficult
to fix with the 1.x API. If you keep using 1.x instead of the latest version
(currently 3.1), you acknowledge that the 1.x software has more bugs, is less
compliant with the specifications and has less protection against security
vulnerabilities.


Description
-----------
 This software contains Java(tm) classes covering CSS document style formatting.
Unless otherwise noted, this software is provided under a BSD-style licence
(see the LICENSE.txt file, and also LICENSES.txt for included files that have a
different licensing).

 The functionality in this library can be divided in the following areas:

- An implementation of the standard W3C CSS Object Model API, that allows 
  to get computed styles for elements in a DOM Document. A DOM implementation 
  is available, as well as a DOM4J backend (module css4j-dom4j) and also a DOM
  wrapper that can be used with an external DOM implementation.
- An extension API to the base W3C style declaration.
- A device profile API to encapsulate target device-specific information. An
  example implementation based on Java2D is in the 'render' module of the main
  Carte project.
- A few AWT helper classes (AWT module).
- Some helper XML-DTD classes.

 This library's CSS parsing is based on the SAC api and requires a SAC parser
(see http://www.w3.org/Style/CSS/SAC/); this library has its own. To use a
specific parser, just set the org.w3c.css.sac.parser system property to the full
class name, for example "org.apache.batik.css.parser.Parser" for Batik's parser.
If you do not set that property, the library will instantiate its built-in
parser. See "Software dependencies" near the end of this document for more
details.


Packaging
---------
 This project is divided in several modules:

- Core module: file css4j-<version>.jar
- User agent module: file css4j-agent-<version>.jar
- Dom4j backend module: file css4j-dom4j-<version>.jar
- AWT module, with AWT helper classes: file css4j-awt-<version>.jar

 Depending on your use case, you may just need the core module, the core module
plus the dom4j one, or all four modules.


Java(tm) Runtime Environment requirements
-----------------------------------------
 All the classes in the binary package have been compiled with a Java SE 
compiler set to 1.7 compiler compliance level, except the module-info files.

 Building the library requires a JDK version 12 or higher, although the
resulting jar files can be run with a 1.7 JRE.


W3C Compliance
--------------
 Some parts of the code may throw DOMExceptions that are not covered by the 
CSS Object Model specification. Those cases are documented in the code.

 The behaviour of the documents and sheets varies according to the 'compliance
mode' of the associated document (DTD-less documents are in 'quirks' mode).

 If your use case is broken due to non-conformant behaviour, please report.


CSS3 Support
------------
 CSS3 is partially supported by the base CSS interfaces, and is not supported 
by the experimental visual formatting model. The following table summarizes 
the basic support for setting/retrieving the main CSS level 3/4 features (other
specifications are also supported):
  ___________________________________________
 |    CSS3 Spec Name           |   Support   |
 |-----------------------------|-------------|
 | Background / Border         | Yes         |
 | Color                       | Yes         |
 | Media Queries               | Partial (1) |
 | Selectors                   | Yes     (2) |
 | Transitions                 | Yes         |
 | Values                      | Yes     (3) |
 | Grid / Template / Alignment | Partial (4) |
 |_____________________________|_____________|
Notes:
 1) Event handling with addListener/removeListener is not supported, given that
the library's user is supposed to be in control of the CSSCanvas instances where
the information about such events should be available.
 2) Modern selectors are not well supported by the current SAC api. Be careful
when using SAC parsers other than this library's own parser (read "Software
dependencies" for information about choosing a SAC parser).
 3) The SAC api provides very limited support for new types, so this library
introduced an enhancement called NSAC that only the native parser supports (see
below). Also, calc() values are not supported by any current parser except this
library's own parser.
 4) Legacy gap properties (grid-row-gap, grid-column-gap, and grid-gap) are not
supported, although the longhands can be used if declared explicitly).

 The SAC api does not provide support for several modern CSS3/4 constructs, so
this library uses its own minimal extension to SAC (see the doc.style.css.nsac
package).


Using CSS4J
-----------
 The usage guide at the website and the Javadoc overviews of the different
packages can be a starting point for users. Unit tests may also be useful
in showing different uses of the library. Generally, the library will be used in
the context of a document object model tree, but stand-alone use of style
declarations and style sheets is also possible.


Software dependencies
=====================

 To build this library you need:

- The JCLF package. Version 4.0.4 or higher is required. Go to
  https://sourceforge.net/projects/jclf for downloads, or install with the
  release-scripts/install-jclf.sh script.

- The W3C SAC classes. Download sac.jar from http://www.w3.org/Style/CSS/SAC/

- Apache Commons Codec. https://commons.apache.org/proper/commons-codec/

- The SLF4J package, which is a logging package. See http://www.slf4j.org/ 
  for more information.

To build the dom4j module the following is required:

- The dom4j JAR package (tested with 2.1.3).
  URL: https://github.com/dom4j

- The XPP3 Pull Parser (which is supported by this library but beware that it
  does not support entities). See:
  https://github.com/xmlpull-xpp3/xmlpull-xpp3

 In addition, to run the library you need:

- A SAC implementation. There are basically three choices: this library's own
  implementation, Apache Batik's, and SteadyState/CSSParser. To use a specific
  SAC parser you need to set the value of the 'org.w3c.css.sac.parser' system
  property to the parser's qualified class name. To use this library's own
  parser you do not need to set that property (the full class name would be
  'io.sf.carte.doc.style.css.parser.CSSParser'). To use the SteadyState parser
  set it to 'com.steadystate.css.parser.SACParserCSS3', and for Batik's parser
  use 'org.apache.batik.css.parser.Parser'.

  If you decide to run the library with Batik's parser you need the
  "batik-css.jar", "batik-i18n.jar" and "batik-util.jar" files that are
  available from the latest Batik SVG toolkit release from
  https://xmlgraphics.apache.org/batik/. The old Flute SAC parser works
  for certain cases but is outdated and not currently maintained.

 Optional packages:

- To run the unit tests you need recent versions of JUnit 4, Batik and
  optionally the SteadyState/CSSParser and Flute parsers:
    http://sourceforge.net/projects/cssparser
    http://www.w3.org/2002/06/flutejava-1.3.zip
  Tests and the css4j-agent module also require the validator.nu html5 parser:
    https://about.validator.nu/htmlparser/

  The basic reason for those testing dependencies is to make sure that basic
  functionality still works with other parsers like Batik and SS CSSParser,
  although the library does not need them to work.

- Dom4j module: unit tests require Jaxen (https://github.com/jaxen-xpath/jaxen).
  This software was tested with 1.2.0.

 A Maven build (which requires Java 12 or higher) is provided. The dom4j module
requires dom4j 2.x to build, although you should be able to run the resulting
jar file with dom4j 1.6 if you are stuck with it.


Project Sites
=============
Project home: https://css4j.github.io/
Development site: https://github.com/css4j
